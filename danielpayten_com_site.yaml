# [START kubernetes_deployment]
apiVersion: apps/v1
kind: Deployment
metadata:
  name: danielpayten-com-site
  labels:
    app: danielpayten-com-site
spec:
  replicas: 1
  selector:
    matchLabels:
      app: danielpayten-com-site
  template:
    metadata:
      labels:
        app: danielpayten-com-site
    spec:
      containers:
      - name: danielpayten-com-site-app
        # Replace  with your project ID or use `make template`
        image: gcr.io/danielpayten-com-website/danielpayten-com-site
        # This setting makes nodes pull the docker image every time before
        # starting the pod. This is useful when debugging, but should be turned
        # off in production.
        imagePullPolicy: Always
        env:
            # [START cloudsql_secrets]
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: cloudsql
                  key: database
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: cloudsql
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cloudsql
                  key: password
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: django-config
                  key: secret_key
            # [END cloudsql_secrets]
        ports:
        - containerPort: 8080

      # [START proxy_container]
      - image: gcr.io/cloudsql-docker/gce-proxy:1.16
        name: cloudsql-proxy
        command: ["/cloud_sql_proxy", "--dir=/cloudsql",
                  "-instances=danielpayten-com-website:europe-west1:danielpayten-com-pg-db=tcp:5432",
                  "-credential_file=/secrets/cloudsql/credentials.json"]
        volumeMounts:
          - name: cloudsql-oauth-credentials
            mountPath: /secrets/cloudsql
            readOnly: true
          - name: ssl-certs
            mountPath: /etc/ssl/certs
          - name: cloudsql
            mountPath: /cloudsql
      # [END proxy_container]
      # [START volumes]
      volumes:
        - name: cloudsql-oauth-credentials
          secret:
            secretName: cloudsql-oauth-credentials
        - name: ssl-certs
          hostPath:
            path: /etc/ssl/certs
        - name: cloudsql
          emptyDir: {}
      # [END volumes]
# [END kubernetes_deployment]

---

# [START service]
# The polls service provides a load-balancing proxy over the polls app
# pods. By specifying the type as a 'LoadBalancer', Kubernetes Engine will
# create an external HTTP load balancer.
# For more information about Services see:
#   https://kubernetes.io/docs/concepts/services-networking/service/
# For more information about external HTTP load balancing see:
#   https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
#apiVersion: v1
#kind: Service
#metadata:
#  name: danielpayten-com-site
#  labels:
#    app: danielpayten-com-site
#spec:
#  type: LoadBalancer
#  ports:
#  - port: 80
#    targetPort: 8080
#  loadBalancerIP: "34.76.154.215"
#  selector:
#    app: danielpayten-com-site
# [END service]

apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: danielpayten-com-site
  labels:
    app: danielpayten-com-site
spec:
  domains:
    - danielpayten.com
    - www.danielpayten.com

---

apiVersion: v1
kind: Service
metadata:
  name: danielpayten-com-site
  labels:
    app: danielpayten-com-site
spec:
  selector:
    app: danielpayten-com-site
  type: NodePort
  ports:
    - port: 80
      targetPort: 8080

---
apiVersion: networking.gke.io/v1beta1
kind: FrontendConfig
metadata:
  name: ssl-redirect
spec:
  redirectToHttps:
    enabled: true
---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: managed-cert-ingress
  labels:
    app: danielpayten-com-site
  annotations:
    kubernetes.io/ingress.global-static-ip-name: danielpayten-com-globalip
    networking.gke.io/managed-certificates: managed-cert
    kubernetes.io/ingress.class: "gce"
    networking.gke.io/v1beta1.FrontendConfig: ssl-redirect
spec:
  defaultBackend:
    service:
      name: danielpayten-com-site
      port:
        number: 80
